/** THIS IS A GENERATED FILE
 * @command pnpm build
 */
const metaData = {
  code: 'var Component=(()=>{var l=Object.create;var a=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,m=Object.prototype.hasOwnProperty;var f=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),b=(n,e)=>{for(var i in e)a(n,i,{get:e[i],enumerable:!0})},s=(n,e,i,r)=>{if(e&&typeof e=="object"||typeof e=="function")for(let o of u(e))!m.call(n,o)&&o!==i&&a(n,o,{get:()=>e[o],enumerable:!(r=p(e,o))||r.enumerable});return n};var w=(n,e,i)=>(i=n!=null?l(g(n)):{},s(e||!n||!n.__esModule?a(i,"default",{value:n,enumerable:!0}):i,n)),x=n=>s(a({},"__esModule",{value:!0}),n);var h=f((k,d)=>{d.exports=_jsx_runtime});var j={};b(j,{default:()=>I,frontmatter:()=>v});var t=w(h()),v={title:"Migrating to Next.js 13\'s app router",published:new Date(1699583453235),description:"Having used the pages directory and its opinionated file-based routing for a while, I wanted to try and migrate to the new app router and server components and test how much it tested my mental model and assumptions.",tags:["explainers","nextjs","configuration"]};function c(n){let e=Object.assign({p:"p",a:"a",code:"code",h2:"h2",ul:"ul",li:"li",em:"em"},n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)("iframe",{width:"560",height:"315",src:"https://www.youtube.com/embed/YQMSietiFm0?si=fLu9Tc-WdgbYjC5c",title:"YouTube video player",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share",allowfullscreen:!0}),`\n`,(0,t.jsxs)(e.p,{children:["I\'m pretty familiar with ",(0,t.jsx)(e.a,{href:"https://nextjs.org/",children:"Next.js"}),`. I\'ve been using it\nsince Next 9/10 and the simplicity of its mental model was always a big draw for\nme. The structure and the ability to opt-in to more dynamic features like server\nrendering and API routes as simple optional additives was intuitive as much as\nit was powerful.`]}),`\n`,(0,t.jsxs)(e.p,{children:[`Since version 13 though there\'s been a paradigm shift and it\'s changed the model\nand its constraints. The `,(0,t.jsx)(e.code,{children:"app"}),` directory and certain new file conventions have\nbeen introduced to allow for a new\n`,(0,t.jsx)(e.a,{href:"https://nextjs.org/docs/routing/introduction",children:"app router"}),` and\n`,(0,t.jsx)(e.a,{href:"https://nextjs.org/docs/api-reference/next/server-components",children:"server components"}),`.\nFrom afar and having watched videos like Lee Robinson\'s above it looked \'simple\nenough\', so I wanted to try it out for myself.`]}),`\n`,(0,t.jsx)(e.h2,{id:"the-old-way",children:"The old way"}),`\n`,(0,t.jsx)(e.p,{children:`Take this website for example. It\'s a simple blog with a few pages and a few\nposts. The structure is as follows:`}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"pages/_app.tsx"})," - the app shell"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"pages/index.tsx"})," - the home page"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"pages/about.tsx"})," - the about page"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"pages/posts/index.tsx"})," - the blog index page"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"pages/posts/[slug].tsx"})," - a blog post page"]}),`\n`]}),`\n`,(0,t.jsx)(e.p,{children:`For the latter two, there are dynamic content requirements sourced from my blog\nthat need to be fetched and injected into the build. On the post index page, I\nneed to fetch a list of all the posts, on the post page I need to fetch the post\nitself.`}),`\n`,(0,t.jsxs)(e.p,{children:["In Next <= 12 using the ",(0,t.jsx)(e.code,{children:"getStaticProps"})," and ",(0,t.jsx)(e.code,{children:"getStaticPaths"}),` functions is\nenough to get this done. Overall the code is pretty simple and the mental model\nis easy to grasp.`]}),`\n`,(0,t.jsx)(e.h2,{id:"the-new-way",children:"The new way"}),`\n`,(0,t.jsxs)(e.p,{children:[`The biggest shift in Next 13 is the introduction of\n`,(0,t.jsx)(e.a,{href:"https://www.joshwcomeau.com/react/server-components/",children:"React Server Components"}),`\n(great explainer from Josh Comeau) - everything else that\'s shifted - the\nremoval and addition of new APIs, the directory re-structuring is a flow-on from\nthis main point.`]}),`\n`,(0,t.jsxs)(e.p,{children:["Server components are ",(0,t.jsx)(e.em,{children:"neat"}),` but require a little bit of rewiring of your\nexisting understanding of how `,(0,t.jsx)(e.a,{href:"https://react.dev/",children:"React works"}),` to properly get\nyour head around. I\'m on the fence if I\'m a complete convert (there is certain\nmagic in requiring a compile step that didn\'t used to exist, AND now different\ncode runs on server and client) but on the whole I\'d say there a net positive\nfor the user experience.`]}),`\n`,(0,t.jsx)(e.p,{children:`Overall this means the previous pages structure becomes something like this\nafter migration:`}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"app/layout.tsx"})," - the app shell"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"app/page.tsx"})," - the home page"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"app/about/page.tsx"})," - the about page"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"app/posts/page.tsx"})," - the blog index page"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"app/posts/[slug]/page.tsx"})," - a blog post page"]}),`\n`]}),`\n`,(0,t.jsx)(e.h2,{id:"the-migration-experience",children:"The migration experience"}),`\n`,(0,t.jsxs)(e.p,{children:["Look, a big thanks to ",(0,t.jsx)(e.a,{href:"leerob.io",children:"Lee Robinson"}),`\'s video above because it made a\nworld of difference, but the one thing I would say is the migration experience\nis not as smooth as I would have liked, and is only simple if you carefully\nmanage the refactor.`]}),`\n`,(0,t.jsxs)(e.p,{children:[`Here is the official guide to\n`,(0,t.jsx)(e.a,{href:"https://nextjs.org/docs/app/building-your-application/upgrading/app-router-migration",children:"migration"}),`.\nIt\'s comprehensive but it\'s a lot to take in. There are many parts that require\nyou to dive deeper into the `,(0,t.jsx)(e.a,{href:"https://nextjs.org/docs/app",children:"app router docs"}),` to\nunderstand the implications of the changes.`]}),`\n`,(0,t.jsx)(e.p,{children:`I was personally disappointed that there weren\'t codemods available to manage\nthe simple changes - but once I started to migrate I found this was probably a\ngood thing because the whole framework has changed.`}),`\n`,(0,t.jsx)(e.p,{children:"I had to RTFM and then RTFM again to grok things."}),`\n`,(0,t.jsx)(e.h2,{id:"overall-observations",children:"Overall observations"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[`A bit more verbose in the file structure but a bit less in having to manage\nthe `,(0,t.jsx)(e.code,{children:"getStaticProps"})," and ",(0,t.jsx)(e.code,{children:"getStaticPaths"}),` functions - that said there are a\nnumber of additional convention introduced that you need to be aware of\nincluding form actions, caching and revalidation.`]}),`\n`,(0,t.jsx)(e.li,{children:`The rules of server components make sense once you know them but don\'t expect\nthis to be instant.`}),`\n`,(0,t.jsx)(e.li,{children:"I wish a bit more of the migration could\'ve been automated."}),`\n`,(0,t.jsx)(e.li,{children:`The direction of Next is becoming more complex and richer but has traded IMHO\na bit of its intuitive simplicity.`}),`\n`,(0,t.jsx)(e.li,{children:`The abstractions over the app head metadata seem like a bit of unfortunate\nindirection.`}),`\n`]})]})}function y(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(c,n)})):c(n)}var I=y;return x(j);})();\n;return Component;',
  frontmatter: {
    title: "Migrating to Next.js 13's app router",
    published: '2023-11-10T02:30:53.235Z',
    description:
      'Having used the pages directory and its opinionated file-based routing for a while, I wanted to try and migrate to the new app router and server components and test how much it tested my mental model and assumptions.',
    tags: ['explainers', 'nextjs', 'configuration'],
    modified: {
      raw: '2023-11-10T04:29:22.473Z',
      formatted: 'November 10, 2023',
    },
    created: {
      raw: '2023-11-10T02:30:53.235Z',
      formatted: 'November 10, 2023',
    },
    slug: 'migrating-to-next13-app-router-2023-10-10',
  },
  errors: [],
  matter: {
    content:
      "\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/YQMSietiFm0?si=fLu9Tc-WdgbYjC5c\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen></iframe>\n\nI'm pretty familiar with [Next.js](https://nextjs.org/). I've been using it\nsince Next 9/10 and the simplicity of its mental model was always a big draw for\nme. The structure and the ability to opt-in to more dynamic features like server\nrendering and API routes as simple optional additives was intuitive as much as\nit was powerful.\n\nSince version 13 though there's been a paradigm shift and it's changed the model\nand its constraints. The `app` directory and certain new file conventions have\nbeen introduced to allow for a new\n[app router](https://nextjs.org/docs/routing/introduction) and\n[server components](https://nextjs.org/docs/api-reference/next/server-components).\nFrom afar and having watched videos like Lee Robinson's above it looked 'simple\nenough', so I wanted to try it out for myself.\n\n## The old way\n\nTake this website for example. It's a simple blog with a few pages and a few\nposts. The structure is as follows:\n\n- `pages/_app.tsx` - the app shell\n- `pages/index.tsx` - the home page\n- `pages/about.tsx` - the about page\n- `pages/posts/index.tsx` - the blog index page\n- `pages/posts/[slug].tsx` - a blog post page\n\nFor the latter two, there are dynamic content requirements sourced from my blog\nthat need to be fetched and injected into the build. On the post index page, I\nneed to fetch a list of all the posts, on the post page I need to fetch the post\nitself.\n\nIn Next &lt;= 12 using the `getStaticProps` and `getStaticPaths` functions is\nenough to get this done. Overall the code is pretty simple and the mental model\nis easy to grasp.\n\n## The new way\n\nThe biggest shift in Next 13 is the introduction of\n[React Server Components](https://www.joshwcomeau.com/react/server-components/)\n(great explainer from Josh Comeau) - everything else that's shifted - the\nremoval and addition of new APIs, the directory re-structuring is a flow-on from\nthis main point.\n\nServer components are _neat_ but require a little bit of rewiring of your\nexisting understanding of how [React works](https://react.dev/) to properly get\nyour head around. I'm on the fence if I'm a complete convert (there is certain\nmagic in requiring a compile step that didn't used to exist, AND now different\ncode runs on server and client) but on the whole I'd say there a net positive\nfor the user experience.\n\nOverall this means the previous pages structure becomes something like this\nafter migration:\n\n- `app/layout.tsx` - the app shell\n- `app/page.tsx` - the home page\n- `app/about/page.tsx` - the about page\n- `app/posts/page.tsx` - the blog index page\n- `app/posts/[slug]/page.tsx` - a blog post page\n\n## The migration experience\n\nLook, a big thanks to [Lee Robinson](leerob.io)'s video above because it made a\nworld of difference, but the one thing I would say is the migration experience\nis not as smooth as I would have liked, and is only simple if you carefully\nmanage the refactor.\n\nHere is the official guide to\n[migration](https://nextjs.org/docs/app/building-your-application/upgrading/app-router-migration).\nIt's comprehensive but it's a lot to take in. There are many parts that require\nyou to dive deeper into the [app router docs](https://nextjs.org/docs/app) to\nunderstand the implications of the changes.\n\nI was personally disappointed that there weren't codemods available to manage\nthe simple changes - but once I started to migrate I found this was probably a\ngood thing because the whole framework has changed.\n\nI had to RTFM and then RTFM again to grok things.\n\n## Overall observations\n\n- A bit more verbose in the file structure but a bit less in having to manage\n  the `getStaticProps` and `getStaticPaths` functions - that said there are a\n  number of additional convention introduced that you need to be aware of\n  including form actions, caching and revalidation.\n- The rules of server components make sense once you know them but don't expect\n  this to be instant.\n- I wish a bit more of the migration could've been automated.\n- The direction of Next is becoming more complex and richer but has traded IMHO\n  a bit of its intuitive simplicity.\n- The abstractions over the app head metadata seem like a bit of unfortunate\n  indirection.\n",
    data: {
      title: "Migrating to Next.js 13's app router",
      published: '2023-11-10T02:30:53.235Z',
      description:
        'Having used the pages directory and its opinionated file-based routing for a while, I wanted to try and migrate to the new app router and server components and test how much it tested my mental model and assumptions.',
      tags: ['explainers', 'nextjs', 'configuration'],
      modified: {
        raw: '2023-11-10T04:29:22.473Z',
        formatted: 'November 10, 2023',
      },
      created: {
        raw: '2023-11-10T02:30:53.235Z',
        formatted: 'November 10, 2023',
      },
      slug: 'migrating-to-next13-app-router-2023-10-10',
    },
    isEmpty: false,
    excerpt: '',
  },
}
export default metaData
